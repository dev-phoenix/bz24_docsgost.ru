"""
Django settings for dg project.

Generated by 'django-admin startproject' using Django 4.1.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import sys, os, io
from pathlib import Path
from env.env import ENV, IS_PRODUCT, SECRET_KEY, ALLOWED_HOSTS,\
    DB_NAME, DB_USER, DB_PASSWORD, DB_HOST
import json
from dg.color import color
# from django.forms.renderers import TemplatesSetting

print('ENV', ENV)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if IS_PRODUCT:
    DEBUG = False
# DEBUG = False

ALLOWED_HOSTS = ALLOWED_HOSTS


# class CustomFormRenderer(TemplatesSetting):
#     form_template_name = "form_login.html"


# FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'
# FORM_RENDERER = "dg.settings.CustomFormRenderer"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'projectTempl',
    # 'projectTempl.templatetags',
    'debug_toolbar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'dg.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [],
        'DIRS': [
            # 'templates',
            # sites/docsgost.ru/dg/templates/form_login.html
            str(BASE_DIR) + "/dg/templates/",
        ],
        
        # 'DIRS': [BASE_DIR + '/media'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 'environment': 'dg.projectTempl.jinja2.environment',
            # 'environment': 'projectTempl.jinja2.environment',
        },
    },
    {
        # 'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [],
        'DIRS': [
            # 'templates'
            str(BASE_DIR) + "/dg/templates2/",
            ],
        
        # 'DIRS': [BASE_DIR + '/media'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'environment': 'projectTempl.jinja2.environment',
        },
    },
]

PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))
# SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))
# SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))
# TEMPLATE_DIRS = (
#     os.path.join(SETTINGS_PATH, 'templates'),
# )
TEMPLATE_DIRS = [
    # os.path.join(PROJECT_PATH, 'templates/'),
    str(BASE_DIR) + "/templates/",
]

WSGI_APPLICATION = 'dg.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

dj_host_name = os.environ.get('SERVER_NAME')
# print('dj_host_name', dj_host_name)

# if(dj_host_name != None):
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': BASE_DIR / 'db.test.1.sqlite3',
#         }
#     }
# else:




if IS_PRODUCT:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASSWORD,
            'HOST': DB_HOST,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'dg/db2.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ru'
LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# https://runebook.dev/ru/docs/django/howto/static-files/index

# STATIC_URL = 'static/'
# STATIC_ROOT= 'static/'

STATIC_URL = 'static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DOWNLOADS_ROOT = os.path.join(BASE_DIR, 'media')

# SITE_ROOT = os.path.dirname(os.path.realpath(__file__))
# STATICFILES_DIRS = (
#     # os.path.join(SITE_ROOT, 'static/'),
#     os.path.join(BASE_DIR, 'static/'),
# )
if DEBUG:
    # BASE_DIR = Path(__file__).resolve().parent.parent
    print('__file__',__file__)
    print('BASE_DIR',BASE_DIR)
    print('resolve',Path(__file__).resolve())
    print('parent',Path(__file__).resolve().parent)
    print('parent.parent',Path(__file__).resolve().parent.parent)
    print('parent.parent.parent',Path(__file__).resolve().parent.parent.parent)

STATICFILES_DIRS = [
    str(BASE_DIR) + "/static",
    # STATIC_ROOT,
    # "/home/eagle/projects/_sandbox/bz/bz24/sites/docsgost.ru/dg/static/",
    # "/home/eagle/projects/_sandbox/bz/bz24/sites/docsgost.ru/static/",
    # "/home/eagle/projects/_sandbox/bz/bz24/sites/docsgost.ru/media/",
    # "/home/eagle/projects/_sandbox/bz/bz24/sites/docsgost.ru/dg/media/",
    str(BASE_DIR) + "/media/",
    ("downloads", str(BASE_DIR) + "/media/"),
]
if DEBUG:
    ...
    print(color.GREEN+color.BOLD + 'STATICFILES_DIRS\n' + color.END,
            json.dumps(STATICFILES_DIRS, indent=4, ensure_ascii=False))

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
